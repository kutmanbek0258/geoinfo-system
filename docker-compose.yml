version: '3.8'

services:
  # ====== Databases ======
  postgres-auth:
    image: postgres:15
    container_name: postgres-auth
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d auth_db -h localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  redis-auth:
    image: redis:7.4.0
    container_name: redis-auth
    environment:
      - REDIS_DATABASES=0
      - REDIS_PASSWORD=qwerty12345678
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30
      start_period: 5s

  postgres-geodata:
    image: postgis/postgis:16-3.4
    container_name: postgres-geodata
    environment:
      POSTGRES_DB: geodata_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d geodata_db -h localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  postgres-docs:
    image: postgres:15
    container_name: postgres-docs
    environment:
      POSTGRES_DB: docs_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d docs_db -h localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # ====== Message Broker ======
  kafka:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      # внешний доступ (для микросервисов вне docker-compose)
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ====== Elasticsearch for Search Service ======
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cat/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ====== GEOSERVER ======
  geoserver:
    image: kartoza/geoserver:2.23.2
    volumes:
      - ./geoserver_uploads:/opt/geoserver/data_dir/uploads
    environment:
      - GEOSERVER_ADMIN_USER=admin
      - GEOSERVER_ADMIN_PASSWORD=geoserver

  # ======= MINIO STORAGE ======
  minio:
    image: minio/minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: minio_access_key
      MINIO_ROOT_PASSWORD: minio_secret_key
    command: server /data --console-address ":9001"
    volumes:
      - /minio_data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # ====== ONLYOFFICE DOC SERVER ======
  onlyoffice-doc-server:
    image: onlyoffice/documentserver:latest
    container_name: onlyoffice-doc-server
    environment:
      - JWT_ENABLED=true
      - JWT_SECRET=a_very_long_and_secure_secret_key_for_onlyoffice_jwt_32_chars
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsSL http://localhost/healthcheck || exit 1" ]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 40s

  # ====== Config, Discovery, Gateway ======
  config-server:
    build:
      context: ./config-server
    container_name: config-server
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  discovery-server:
    build:
      context: ./discovery-server
    container_name: discovery-server
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build:
      context: ./api-gateway
    container_name: api-gateway

  # ====== Microservices ======
  auth-service:
    build:
      context: ./auth-service
    container_name: auth-service
    environment:
      DB_URL: jdbc:postgresql://postgres-auth:5432/auth_db
      DB_USER: postgres
      DB_PASS: password
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  geodata-service:
    build:
      context: ./geodata-service
    container_name: geodata-service
    environment:
      DB_URL: jdbc:postgresql://postgres-geodata:5432/geodata_db
      DB_USER: postgres
      DB_PASS: password
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  document-service:
    build:
      context: ./document-service
    container_name: document-service
    environment:
      DB_URL: jdbc:postgresql://postgres-docs:5432/docs_db
      DB_USER: postgres
      DB_PASS: password
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  search-service:
    build:
      context: ./search-service
    container_name: search-service
    environment:
      ELASTICSEARCH_URI: elasticsearch:9200
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
