server:
  port: 9001
  error:
    include-stacktrace: ALWAYS
  servlet:
    context-path:
spring:
  application:
    name: auth-service
  output:
    ansi:
      enabled: ${JSSO_ANSI_ENABLED:ALWAYS}
  mvc:
    static-path-pattern: /static/**
    cors:
      configs:
        - pattern: /**
          allowed-origins: "http://127.0.0.1:8080,http://localhost:8080,http://localhost:7778,http://localhost:7979,http://localhost:8181,http://localhost:9090"
          allowed-headers: "*"
          exposed-headers: ${spring.security.oauth2.authorizationserver.custom-handler-header-name}
          allowed-methods: "*"
          allow-credentials: true
  web:
    resources:
      static-locations: classpath:static
  session:
    timeout: 1800                 # Время жизни сессии (в секундах)
    redis:
      flush-mode: on_save         # Указываем, когда изменения сеанса записываются в хранилище (immediate или on_save)
      namespace: j-sso:session    # Пространство имен для ключей, используемых для хранения сессий.
      save-mode: on_set_attribute # Определяет в какой момент происходит сохранение изменений сессии (on_set_attribute, on_get_attribute, always)
  task:
    scheduling:
      pool:
        size: 2
  security:
    oauth2:
      resourceserver:
        opaquetoken:
          client-id: sso-client
          client-secret: sso-client
          introspection-uri: http://localhost:9001/oauth2/token-info
      authorizationserver:
        issuer-url: http://localhost:9001${server.servlet.context-path}
        introspection-endpoint: /oauth2/token-info
        reset-password-endpoint: /client/auth/reset-password
        authentication-success-url: http://localhost:9001${server.servlet.context-path}/client/oauth/continue
        saved-request-url-starts-with: http://localhost:9001${server.servlet.context-path}/oauth2/authorize
        custom-handler-header-name: J-Sso-Next-Location
        authorization-ttl: 10800000
        authorization-consent-ttl: 10800000
      client:
        registration:
          github:
            clientId: ${USER_SERVICE_GITHUB_CLIENT_ID}
            clientSecret: ${USER_SERVICE_GITHUB_CLIENT_SECRET}
            redirect-uri: http://localhost:9001${server.servlet.context-path}/login/oauth2/code/github

          google:
            clientId: ${USER_SERVICE_GOOGLE_CLIENT_ID}
            clientSecret: ${USER_SERVICE_GOOGLE_CLIENT_SECRET}
            redirect-uri: http://localhost:9001${server.servlet.context-path}/login/oauth2/code/google
            scope:
              - email
              - profile

          yandex:
            provider: yandex
            clientId: ${USER_SERVICE_YANDEX_CLIENT_ID}
            clientSecret: ${USER_SERVICE_YANDEX_CLIENT_SECRET}
            redirect-uri: http://localhost:9001${server.servlet.context-path}/login/oauth2/code/yandex
            authorizationGrantType: authorization_code
            clientName: Yandex

        provider:
          yandex:
            authorization-uri: https://oauth.yandex.ru/authorize
            token-uri: https://oauth.yandex.ru/token
            user-name-attribute: default_email
            userInfoUri: https://login.yandex.ru/info
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
  data:
    redis:
      client-type: lettuce
      database: ${REDIS_DB:0}
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASS:qwerty12345678}
      lettuce:
        pool:
          max-active: 16
          max-idle: 8
  liquibase:
    enabled: false
    change-log: classpath:database/db.changelog.yaml
    contexts: prod, dev
  datasource:
    url: ${PG_URL:jdbc:postgresql://localhost:5433/auth_db}
    username: ${PG_USER:postgres}
    password: ${PG_PASS:password}
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 30000
      connection-test-query: select 1
      maximum-pool-size: 10
      minimum-idle: 10
      initialization-fail-timeout: 1
      leak-detection-threshold: 0
      pool-name: "HikariPool-j-sso"
      register-mbeans: true
  jpa:
    show-sql: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    open-in-view: false

yandex-avatar-url: https://avatars.yandex.net/get-yapic/{avatarId}/islands-retina-50

otp-store:
  cookie-name: j-sso-temporary-session
  cookie-domain: localhost
  cookie-max-age: 180

file-store:
  base-path: ${AUTH_SERVICE_PATH_STORAGE:~/auth-service-file-store}

scheduled-tasks:
  delete-old-events:
    cron: '@daily'
    saved-period-days: 1
  notify-delete-users:
    cron: '@daily'

rest-clients:
  service-client-connection-timeout: 10000
  service-client-request-timeout: 30000

resilience4j:
  circuitbreaker:
    instances:
      default:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 10000

---

spring:
  config:
    activate:
      on-profile: prod
  security:
    headers:
      csp:
        - default-src 'self'
        - script-src 'self'
        - "img-src 'self' data:"
        - font-src 'self' fonts.gstatic.com
        - style-src 'self' fonts.googleapis.com 'nonce-dQw4w9WgXcQ' 'sha256-VBcDFo4Ltbcy2NNfi2Jeyo6IXzMKysUIvWc1d1FGhgY='
        - frame-ancestors 'self'